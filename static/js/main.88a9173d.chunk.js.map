{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Notification/Notification.js","components/Statistics/Statistics.js","components/Feedback/Feedback.js","App.js","index.js"],"names":["Options","handleIncrement","name","type","onClick","SectionTitles","title","children","Notification","message","Statistics","Good","Neutral","Bad","Total","feedback","Feedback","state","good","neutral","bad","event","target","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","toFixed","Section","this","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAeeA,EAfC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBACjB,OACE,oCACE,wBAAQC,KAAK,OAAOC,KAAK,SAASC,QAASH,EAA3C,kBAGA,wBAAQC,KAAK,UAAUC,KAAK,SAASC,QAASH,EAA9C,qBAGA,wBAAQC,KAAK,MAAMC,KAAK,SAASC,QAASH,EAA1C,qBCASI,EATO,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC9B,OACE,oCACE,6BAAKD,IACJC,MCGQC,EAPM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OACE,8BACE,4BAAIA,OCcKC,EAfI,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,KAAMC,EAAoC,EAApCA,QAASC,EAA2B,EAA3BA,IAAKC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC/C,OAAID,EAEA,oCACE,sCAASH,KACT,yCAAYC,KACZ,qCAAQC,KACR,uCAAUC,KACV,mDAAsBC,EAAtB,UAIG,cAAC,EAAD,CAAcN,QAAQ,uBCyClBO,E,4MA1CbC,MAAQ,CACNC,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAEPnB,gBAAkB,SAAAoB,GAAU,IAClBnB,EAASmB,EAAMC,OAAfpB,KACR,EAAKqB,UAAS,SAAAC,GACZ,OAAO,eACJtB,EAAOsB,EAAUtB,GAAQ,O,EAKhCuB,mBAAqB,kBACnB,EAAKR,MAAMC,KAAO,EAAKD,MAAME,QAAU,EAAKF,MAAMG,K,EAEpDM,gCAAkC,WAChC,OAAI,EAAKD,sBACE,EAAKR,MAAMC,KAAO,EAAKO,qBAAwB,KAAKE,UACjD,G,4CAEhB,WACE,OACE,gCACE,cAACC,EAAD,CAAStB,MAAO,wBAAhB,SACE,cAAC,EAAD,CAASL,gBAAiB4B,KAAK5B,oBAGjC,cAAC2B,EAAD,CAAStB,MAAO,eAChB,cAAC,EAAD,CACEK,KAAMkB,KAAKZ,MAAMC,KACjBN,QAASiB,KAAKZ,MAAME,QACpBN,IAAKgB,KAAKZ,MAAMG,IAChBN,MAAOe,KAAKJ,qBACZV,SAAUc,KAAKH,2C,GA1CFI,aCARC,EAJH,WACV,OAAO,cAAC,EAAD,K,MCGTC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.88a9173d.chunk.js","sourcesContent":["const Options = ({ handleIncrement }) => {\r\n  return (\r\n    <section>\r\n      <button name=\"good\" type=\"button\" onClick={handleIncrement}>\r\n        Good\r\n      </button>\r\n      <button name=\"neutral\" type=\"button\" onClick={handleIncrement}>\r\n        Neutral\r\n      </button>\r\n      <button name=\"bad\" type=\"button\" onClick={handleIncrement}>\r\n        Bad\r\n      </button>\r\n    </section>\r\n  );\r\n};\r\nexport default Options;\r\n","const SectionTitles = ({ title, children }) => {\r\n  return (\r\n    <section>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default SectionTitles;\r\n","const Notification = ({ message }) => {\r\n  return (\r\n    <div>\r\n      <p>{message}</p>\r\n    </div>\r\n  );\r\n};\r\nexport default Notification;\r\n","import Notification from '../Notification/Notification';\r\n\r\nconst Statistics = ({ Good, Neutral, Bad, Total, feedback }) => {\r\n  if (Total) {\r\n    return (\r\n      <section>\r\n        <p>Good:{Good}</p>\r\n        <p>Neutral:{Neutral}</p>\r\n        <p>Bad:{Bad}</p>\r\n        <p>Total:{Total}</p>\r\n        <p>Positive feedback:{feedback}%</p>\r\n      </section>\r\n    );\r\n  } else {\r\n    return <Notification message=\"No feedback given\" />;\r\n  }\r\n};\r\nexport default Statistics;\r\n","import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Options from '../FeedbackOptions/FeedbackOptions';\r\nimport Section from '../Section/Section';\r\nimport Sections from '../Statistics/Statistics';\r\n\r\nclass Feedback extends Component {\r\n  static propTypes = {\r\n    valueGood: PropTypes.number,\r\n    valueNeutral: PropTypes.number,\r\n    valueBad: PropTypes.number,\r\n  };\r\n\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n  handleIncrement = event => {\r\n    const { name } = event.target;\r\n    this.setState(prevState => {\r\n      return {\r\n        [name]: prevState[name] + 1,\r\n      };\r\n    });\r\n  };\r\n\r\n  countTotalFeedback = () =>\r\n    this.state.good + this.state.neutral + this.state.bad;\r\n\r\n  countPositiveFeedbackPercentage = () => {\r\n    if (this.countTotalFeedback()) {\r\n      return ((this.state.good / this.countTotalFeedback()) * 100).toFixed();\r\n    } else return 0;\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Section title={'Please leave feedback'}>\r\n          <Options handleIncrement={this.handleIncrement} />\r\n        </Section>\r\n\r\n        <Section title={'Statistics'} />\r\n        <Sections\r\n          Good={this.state.good}\r\n          Neutral={this.state.neutral}\r\n          Bad={this.state.bad}\r\n          Total={this.countTotalFeedback()}\r\n          feedback={this.countPositiveFeedbackPercentage()}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Feedback;\r\n\r\n// hendleGood = () => {\r\n//   this.setState(prevState => ({\r\n//     good: prevState.good + 1,\r\n//   }));\r\n// };\r\n// hendleNeutral = () => {\r\n//   this.setState(prevState => ({\r\n//     neutral: prevState.neutral + 1,\r\n//   }));\r\n// };\r\n// hendleBad = () => {\r\n//   this.setState(prevState => ({\r\n//     bad: prevState.bad + 1,\r\n//   }));\r\n// };\r\n","import Feedback from './components/Feedback/Feedback';\n\nconst App = () => {\n  return <Feedback />;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}